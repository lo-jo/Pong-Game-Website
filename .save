from rest_framework.generics import RetrieveAPIView
from rest_framework import status
from rest_framework.response import Response
from .models import UserProfile, Match, Tournament
from .serializers import UserProfileSerializer, MatchSerializer, TournamentSerializer

class UserProfileView(RetrieveAPIView):
    queryset = UserProfile.objects.all()
    serializer_class = UserProfileSerializer

    def get_object(self):
        id = self.kwargs['pk']
        try:
            return UserProfile.objects.get(pk=id)
        except UserProfile.DoesNotExist:
            return Response(status=status.HTTP_404_NOT_FOUND)

    def get_related_data(self, user_profile):
        # Obtener historial de partidos del usuario
        matches = Match.objects.filter(player=user_profile.user)
        match_serializer = MatchSerializer(matches, many=True)
        
        # Obtener historial de torneos del usuario
        tournaments = Tournament.objects.filter(players=user_profile.user)
        tournament_serializer = TournamentSerializer(tournaments, many=True)
        
        return {
            'user_profile': self.serializer_class(user_profile).data,
            'matches': match_serializer.data,
            'tournaments': tournament_serializer.data
        }

    def retrieve(self, request, *args, **kwargs):
        user_profile = self.get_object()
        data = self.get_related_data(user_profile)
        return Response(data)


# status -> string
# user_1 -> id 
# user_2 -> id
# winner -> id_user 
# loser  -> id_user
# tournament_id -> id_tournoi
# created_at -> time
import os
from django.core.asgi import get_asgi_application
from channels.routing import ProtocolTypeRouter, URLRouter
from channels.security.websocket import AllowedHostsOriginValidator
from channels.auth import AuthMiddlewareStack
from notification.routing import websocket_urlpatterns
from channels.http import AsgiHandler
# Initialize Daphne with SSL support
from daphne.server import Server
from daphne.endpoints import build_ssl_options
from django.urls import path


os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'trs.settings')

application = ProtocolTypeRouter({
    "http": AsgiHandler(),
    "websocket": AllowedHostsOriginValidator(
        AuthMiddlewareStack(
            URLRouter(
                websocket_urlpatterns
            )
        )
    ),
})

private_key_path = '/etc/ssl/private/selfsigned.key'
certificate_path = '/etc/ssl/private/selfsigned.crt'

ssl_options = build_ssl_options({
    "privateKey": private_key_path,
    "certChain": certificate_path,
})


Server(application, endpoint_description=ssl_options).run()

Server(application, endpoint_description=ssl_options).run()